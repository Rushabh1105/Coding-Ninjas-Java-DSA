Rotten Oranges



Send Feedback
You are given a 2D array of integers of size N * M. Each of the cell contains either of these 3 integers: 
0, 1, 2. The integer 2 denotes a rotten orange, 1 denotes a fresh orange and 0 denotes an empty cell.
Each rotten orange can rot fresh oranges in 4 adjacent cells in 1 unit of time. The 4 cells are left, right, 
top and bottom cell.
For a given matrix, find the minimum units of time in which all oranges become rot. Return -1, if it is not 
possible.
Input Format:
The first line of input contains 2 space separated integers, N and M, that denotes size of given 2D array.
The following N lines contains M space separated integers, that denotes the value of cells of given 2D array.
Constraints:
Value of N and M lies in the range: [1, 10000].
Value of each cell in 2D array can be either 0, 1 or 2.
Output Format:
Print the required integer, as described in the problem description.   
Sample Input 1:
3 5
2 1 0 2 1
1 0 1 2 1
1 0 0 2 1
Sample Output 1:
2
Explanation:
 In the first unit of time, fresh oranges at coordinates: (0, 1), (0, 4), (1, 0), (1, 2), (1, 4), (2, 4).
 In the second unit of time, fresh orange at coordinate: (2, 0) gets rot. Hence, in 2 units of time, all the 
 fresh oranges become rot.
Sample Input 2:
3 5
2 1 0 2 1
1 0 1 0 1
1 0 0 0 2
Sample Output 2:
-1
Explanation:
It is impossible to rot the fresh orange at (1, 2). 


import java.util.Scanner;

public class Main {

	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int m = s.nextInt();

		if( n == 0 || m == 0 ){
			System.out.println(0);
			return;
		}

		int[][] mat = new int[n][m];

		for( int i = 0; i < n; i++ ){
			for( int j = 0; j < m; j++ ){
				mat[i][j] = s.nextInt();
			}
		}

		int ans = helper( mat, n, m );
		boolean checkMat = helper2( mat, n, m );
		if( checkMat ){
			System.out.println(ans);
		}else{
			System.out.println(-1);
		}
	}

	public static int helper( int[][] arr, int n, int m ){
		int ans = 1;

		boolean loop = false;
		while( true ){
			for( int i = 0; i < n; i++ ){
				for( int j = 0; j < m; j++ ){
					if( arr[i][j] == 2 ){
						if( i-1 >= 0 && arr[i-1][j] == 1 ){
							arr[i-1][j] = 2;
							loop = true;
						}
						if( i+1 < n && arr[i+1][j] == 1 ){
							arr[i+1][j] = 2;
							loop = true;
						}
						if( j-1 >= 0 && arr[i][j-1] == 1 ){
							arr[i][j-1] = 2;
							loop = true;
						}
						if( j+1 < m && arr[i][j+1] == 1 ){
							arr[i][j+1] = 2;
							loop = true;
						}
					}
				}
			}

			if( loop == false ){
				break;
			}
			loop = false;

			ans++;
		}

		return ans;
	}

	public static boolean helper2( int[][] mat, int n, int m ){
		for( int i = 0; i < n; i++ ){
			for( int j = 0; j < m; j++ ){
				if( mat[i][j] == 1 ){
					return false;
				}
			}
		}

		return true;
	}

}