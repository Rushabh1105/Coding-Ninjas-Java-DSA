Code : Prim's Algorithm



Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices 
(which are numbered from 0 to V-1) and E number of edges.


Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.


For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. 
And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note: Order of different edges doesn't matter.
Input Format:
Line 1: Two Integers V and E (separated by space)
Next E lines: Three integers ei, ej and wi, denoting that there exists an edge between vertex ei 
and vertex ej with weight wi (separated by space)
Output Format:
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
1 <= Wi <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Input Graph



Sample Output 1 :
0 1 3
1 2 1
0 3 5
Input Graph


import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */

		int[][] adjMat = new int[V][V];

		for( int i = 0; i < E; i++ ){
			int v1 = s.nextInt();
			int v2 = s.nextInt();
			int wt = s.nextInt();
			adjMat[v1][v2] = wt;
			adjMat[v2][v1] = wt;
		}

		primsAlgo( adjMat, V );
	}

	public static void primsAlgo( int[][] adjMat, int n ){
		boolean[] isVisited = new boolean[n];
		int[] parent = new int[n];
		int[] weight = new int[n];

		for( int i = 0; i < n; i++ ){
			weight[i] = Integer.MAX_VALUE;
		}

		parent[0] = -1;
		weight[0] = 0;
		int source = 0;
		int count, minEdge;
		int nextSrc = 0;

	
		for( int i = 0; i < n; i++ ){
			source = findMinVertex( weight, isVisited, n );
			isVisited[source] = true;

			for( int j = 0; j < n; j++ ){
				if( adjMat[source][j] > 0 && isVisited[j] == false && weight[j] > adjMat[source][j] ){
					weight[j] = adjMat[source][j];
					parent[j] = source;
				}
			}
		}

		for(int i = 1;i<n;i++){
			if( i< parent[i] ){
				System.out.println(i+" "+parent[i]+" "+weight[i]);
			}else{
				System.out.println(parent[i]+" "+i+" "+weight[i]);
			}
		}
	}

	public static int findMinVertex( int[] weight, boolean[] isVisited, int n ){
		int v, minEdge;
		v = 0;
		minEdge = Integer.MAX_VALUE;

		for( int i = 0; i < n; i++ ){
			if( isVisited[i] == false && minEdge > weight[i] ){
				v = i;
				minEdge = weight[i];
			}
		}

		return v;
	}
}