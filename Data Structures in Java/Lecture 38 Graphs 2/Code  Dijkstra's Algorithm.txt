Code : Dijkstra's Algorithm



Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are 
numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices 
(including source vertex also) using Dijkstra's Algorithm.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei 
and vertex ej with weight wi (separated by space)
Output Format :
For each vertex, print its vertex number and its distance from source, in a separate line. The vertex 
number and its distance needs to be separated by a single space.
Note : Order of vertices in output doesn't matter.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Input Graph

Sample Output 1 :
0 0
1 3
2 4
3 5


Input Graph


import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
		
		int[][] adjMat = new int[V][V];

		for( int i = 0; i < E; i++ ){
			int v1 = s.nextInt();
			int v2 = s.nextInt();
			int wt = s.nextInt();
			adjMat[v1][v2] = wt;
			adjMat[v2][v1] = wt;
		}

		dijkstra( adjMat, V );
	}

	public static void dijkstra( int[][] adjMat, int n ){
		boolean[] isVisited = new boolean[n];
		int[] distance = new int[n];

		for( int i = 0; i < n; i++ ){
			distance[i] = Integer.MAX_VALUE;
		}
		distance[0] = 0;

		for( int i = 0; i < n; i++ ){
			int minVertex = findMinVertex( distance, isVisited, n );
			isVisited[minVertex] = true;

			for( int j = 0; j < n; j++ ){
				if( adjMat[minVertex][j] != 0 && isVisited[j] == false && distance[minVertex] != Integer.MAX_VALUE ){
					int newDist = distance[minVertex] + adjMat[minVertex][j];
					if( newDist < distance[j] ){
						distance[j] = newDist;
					}
				}
			}
		}

		for(int i = 0; i < n; i++){
			System.out.println(i + " "+ distance[i]);
		}
	}

	public static int findMinVertex( int[] distance, boolean[] isVisited, int n ){
		int minVertex = -1;

		for( int i = 0; i < n; i++ ){
			if( !isVisited[i] && ( minVertex == -1 || distance[i] < distance[minVertex]) ){
				minVertex = i;
			}
		}

		return minVertex;
	}
}