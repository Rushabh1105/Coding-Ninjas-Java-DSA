Second Largest Element In Tree



Send Feedback
Given a generic tree, find and return the node with second largest value in given tree. 
Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40


import java.util.*;

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){


		// Write your code here
		ArrayList<Integer> arr = new ArrayList<>();
		helper(root, arr);

		int max = Integer.MIN_VALUE;
		for( int i = 0; i < arr.size(); i++ ){
			max = Math.max( max, arr.get(i) );
		}

		int secondMax = Integer.MIN_VALUE;
		for( int i = 0; i < arr.size(); i++ ){
			if( arr.get( i ) != max ){
				secondMax = Math.max( secondMax , arr.get(i) );
			}
		}

		// System.out.println( getNode(root, secondMax) );
		
		TreeNode<Integer> ans = new TreeNode<Integer>( secondMax );
		return ans;
	}
	
	public static void helper( TreeNode<Integer> root, ArrayList<Integer> arr ){
		arr.add( root.data );

		for( int i = 0; i < root.children.size(); i++ ){
			helper( root.children.get( i ) , arr );
		}
	}

	public static TreeNode<Integer> getNode( TreeNode<Integer> root, int x ){
		if( root == null ){
			return null;
		}

		if( root.data == x ){
			return root;
		}

		TreeNode<Integer> ans = null;
		for( int i = 0; i < root.children.size(); i++ ){
			return getNode(root.children.get(i), x);
		}

		return ans;
	}
}
