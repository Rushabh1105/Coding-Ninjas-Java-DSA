Replace duplicate values



Send Feedback
Given a linked list that contain some random integers from 1 to n with many duplicates. You need 
to replace each duplicate element that is present in the linked list with the values n+1, n+2, and 
so on (starting from left to right in given LL).
For eg. if input linked list is
1 3 1 4 4 2 1 -1
updated linked list should be -
1 3 5 4 6 2 7
n in the list is 4, so I have to replace each duplicate from left to right with 4, 5 and so on. In that 
way, element 1 (which is at index 2) will be replaced by 5, element 4 (which is present at index 4) by 6 
and element 1 (which is present at index 6) by 7.
You don't need to print the elements, just update the elements in LL.
Input format :
Linked list elements (separated by space and terminated by-1)
Output Format :
Updated LL elements (separated by space)
Sample Input 1 :
1 3 1 4 4 2 1 -1
Sample Output 1 :
1 3 5 4 6 2 7


import java.util.HashMap;
import java.util.Set;

/******** 
Following is the structure of Linked list node
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
		this.next = null;
	}
}
*********/

public class solution {

	public static void changeLL(LinkedListNode<Integer> head) {
		// Write your code here

		HashMap<Integer, Integer> map = new HashMap<>();
		LinkedListNode<Integer> temp1 = head;
		LinkedListNode<Integer> temp2 = head;
		int maxi = Integer.MIN_VALUE;
		int n = 0;

		while( temp1!= null ){
			int data = temp1.data;
			if( map.containsKey( data )){
				map.put( data , map.get(data)+1);
			}else{
				map.put( data , 1 );
			}
			maxi = Math.max( data , maxi );
			n++;
			temp1 = temp1.next;
		}
		int[] arr = new int[n+1];
		maxi++;
		Set<Integer> keys = map.keySet();

		while( temp2 != null ){
			int data = temp2.data;

			if( map.containsKey( data ) && arr[data] != 0 ){
				map.put( data , map.get(data)-1 );
				temp2.data = maxi;
				maxi++;
			}

			arr[data] = 1;
			temp2 = temp2.next;
		}
	}
}