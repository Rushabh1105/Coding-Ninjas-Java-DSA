isConnected?



Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between 
vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there 
isnâ€™t any path from vertices 0,1,3 to vertex 2. 


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {
       
        /* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */

		Scanner s = new Scanner(System.in);
		int v = s.nextInt();
		int e = s.nextInt();

		int[][] adjMat = new int[v][v];

		for( int i = 0; i < e; i++ ){
			int v1 = s.nextInt();
			int v2 = s.nextInt();
			adjMat[v1][v2] = 1;
			adjMat[v2][v1] = 1;
		}

		boolean[] isVisited = new boolean[v];
		boolean ans = true;

		if( v == 0 ){
			System.out.println(true);
			return;
		}
		
		BFT( adjMat, v, isVisited );

		for( int i = 0; i < v; i++ ){
			if( isVisited[i] == false ){
				ans = false;
			}
		}

		System.out.println(ans);
	}

	public static void BFT( int[][] adjMat, int n, boolean[] isVisited ){
		Queue<Integer> q = new LinkedList<>();
		q.add(0);
		isVisited[0] = true;

		while( q.size() != 0 ){
			int cv = q.poll();
			for( int i = 0; i < n; i++ ){
				if( adjMat[cv][i] == 1 && isVisited[i] == false ){
					q.add( i );
					isVisited[i] = true;
				}
			}
		}
	}
}