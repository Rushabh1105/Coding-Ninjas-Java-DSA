Islands



Send Feedback
An island is a small piece of land surrounded by water . A group of islands is said to be connected if 
we can reach from any given island to any other island in the same group . Given V islands 
(numbered from 0 to V-1) and E connections or edges between islands. Can you count the number of 
connected groups of islands.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between 
vertex a and b. 
Output Format :
Print the count the number of connected groups of islands
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V-1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
5 8
0 1
0 4
1 2
2 0
2 4
3 0
3 2
4 3
Sample Output 1:
1 


import java.util.*;

public class Solution {

	public static int numConnected(int[][] adjMat, int n) {
        
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */

		boolean[] visited = new boolean[n];

		int ans = 0;
		for( int i = 0; i < n; i++ ){
			if( visited[i] == false ){
				BFS2( adjMat, n, i, visited );
				ans++;
			}
		}

		// System.out.println(ans);
		return ans;
	}

	public static void BFS2( int[][] adjMat, int n, int i, boolean[] visited ){
		
		Queue<Integer> q = new LinkedList<>();

		q.add( i );
		visited[i] = true;

		while( q.size() != 0 ){
			int currentVertex = q.poll();
			for( int j = 0; j < n; j++ ){
				if( adjMat[currentVertex][j] == 1 && visited[j] == false ){
					q.add(j);
					visited[j] = true;
				}
			}
		}

	}


}