Quick Sort - Problem Statement



Send Feedback
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements 
between 'start' and 'end' using quick sort.


Note :
Make changes in the input array itself.
Input format :
Line 1 : Integer N i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9





public class Solution {
	
	public static void quickSort(int[] arr,int si, int ei) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
		if( si >= ei ){
			return;
		}

		int pivot = partition(arr, si, ei);
		quickSort(arr, si, pivot - 1);
		quickSort(arr, pivot + 1, ei);
	}

	public static int partition( int[] arr, int si, int ei){
		int pivotElement = arr[si];
		int smallNumCnt = 0;

		for(int i = si+1; i <= ei; i++){
			if( arr[i] < pivotElement){
				smallNumCnt++;
			}
		}

		int temp = arr[si + smallNumCnt];
		arr[si + smallNumCnt ] = pivotElement;
		arr[si] = temp;

		int i = si, j = ei;
		while(i < j){
			if( arr[i] < pivotElement ){
				i++;
			}else if( arr[j] >= pivotElement ){
				j--;
			}else{
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--;
 			}
		}

		return si + smallNumCnt;
	}
	
}